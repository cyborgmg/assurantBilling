package br.com.delphos.billing.ejb;

import java.util.HashMap;
import java.util.Map;

import javax.ejb.Stateless;

import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.handler.WSHandlerConstants;

import br.com.delphos.billing.excecoes.BillingException;
import br.com.delphos.billing.security.ClientPasswordCallback;
import br.com.delphos.billing.services.ServicoServer;
import br.com.delphos.billing.servicos.retornos.RetornoCancelarVenda;
import br.com.delphos.billing.servicos.retornos.RetornoIniciarVendaCartaoCredito;

/**
 * Session Bean implementation class consomeDbsWs
 */
@Stateless
public class consomeDbsWs implements consomeDbsWsRemote {
	
	static ServicoServer servicoserver=null;
	
	static {
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();        

        // Use the URL defined in the soap address portion of the WSDL
        factory.setAddress("http://localhost:8080/dbs-ws/services/servicoserver"); 
       
        // Utilize the class which was auto-generated by Apache CXF wsdl2java
        factory.setServiceClass(ServicoServer.class);        

        Object client = factory.create();
        /********************************SSL********************************************************/
        
        
        // Adding Logging Interceptors
        LoggingOutInterceptor loggingOutInterceptor = new LoggingOutInterceptor();
        loggingOutInterceptor.setPrettyLogging(true);
        ClientProxy.getClient(client).getOutInterceptors().add(loggingOutInterceptor);
        
        LoggingInInterceptor loggingInInterceptor = new LoggingInInterceptor();
        loggingInInterceptor.setPrettyLogging(true);
        ClientProxy.getClient(client).getInInterceptors().add(loggingInInterceptor);

        // Set up WS-Security Encryption
        // Reference: https://ws.apache.org/wss4j/using.html
        Map<String, Object> props = new HashMap<String, Object>();
        props.put(WSHandlerConstants.USER, "testkey");
        props.put(WSHandlerConstants.ACTION, WSHandlerConstants.ENCRYPT);
        props.put(WSHandlerConstants.PASSWORD_TYPE, "PasswordText");
        props.put(WSHandlerConstants.ENC_PROP_FILE, "clientKeystore.properties");
        props.put(WSHandlerConstants.ENCRYPTION_PARTS, "{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body");
        props.put(WSHandlerConstants.PW_CALLBACK_CLASS, ClientPasswordCallback.class.getName());
        
        WSS4JOutInterceptor wss4jOut = new WSS4JOutInterceptor(props);

        ClientProxy.getClient(client).getOutInterceptors().add(wss4jOut);
        
        
        /********************************SSL********************************************************/
        
        servicoserver = ((ServicoServer)client);
	}

    /**
     * Default constructor. 
     */
    public consomeDbsWs() {
        // TODO Auto-generated constructor stub
    }

	@Override
	public RetornoIniciarVendaCartaoCredito iniciarVendaCartaoCredito(
			String token, String codigoEmpresa, String codigoProduto,
			String codigoSistema, String cpf, String nome, String email,
			String dddCelular, String telefoneCelular, String dddContato,
			String telefoneContato, String codigoVenda, String dataVenda,
			String bandeiraCartao, String cpfPortadorCartao,
			String nomePortadorCartao, String numeroCartao,
			String vencimentoCartao, String cvvCartao, String tipoCobranca,
			String quantidadeParcelas, String valorCobranca,
			String dataPrimeiraCobranca, String dataFimVigencia)
			throws BillingException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public RetornoCancelarVenda cancelarVenda(String codigoEmpresa,
			String codigoProduto, String codigoSistema, String token,
			String cpf, String codigoVenda, String codigoMotivoCancelamento,
			String valorEstorno, String flagCancelamentoGateway)
			throws BillingException {
		// TODO Auto-generated method stub
		return null;
	}

}
