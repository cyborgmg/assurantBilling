package br.com.delphos.billing.main;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.time.DateUtils;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.handler.WSHandlerConstants;

import br.com.delphos.billing.services.BillingException_Exception;
import br.com.delphos.billing.services.RetornoCancelarVenda;
import br.com.delphos.billing.services.RetornoIniciarVendaCartaoCredito;
import br.com.delphos.billing.services.ServicoServer;
import br.com.delphos.billing.security.ClientPasswordCallback;
import br.com.delphos.billing.util.GerarToken;


public class CancelarVendaClient {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();        

        // Use the URL defined in the soap address portion of the WSDL
        factory.setAddress("http://localhost:8080/dbs-ws/services/servicoserver"); 
       
        // Utilize the class which was auto-generated by Apache CXF wsdl2java
        factory.setServiceClass(ServicoServer.class);        

        Object client = factory.create();
        /********************************SSL********************************************************/
        
        
        // Adding Logging Interceptors
        LoggingOutInterceptor loggingOutInterceptor = new LoggingOutInterceptor();
        loggingOutInterceptor.setPrettyLogging(true);
        ClientProxy.getClient(client).getOutInterceptors().add(loggingOutInterceptor);
        
        LoggingInInterceptor loggingInInterceptor = new LoggingInInterceptor();
        loggingInInterceptor.setPrettyLogging(true);
        ClientProxy.getClient(client).getInInterceptors().add(loggingInInterceptor);

        // Set up WS-Security Encryption
        // Reference: https://ws.apache.org/wss4j/using.html
        Map<String, Object> props = new HashMap<String, Object>();
        props.put(WSHandlerConstants.USER, "testkey");
        props.put(WSHandlerConstants.ACTION, WSHandlerConstants.ENCRYPT);
        props.put(WSHandlerConstants.PASSWORD_TYPE, "PasswordText");
        props.put(WSHandlerConstants.ENC_PROP_FILE, "clientKeystore.properties");
        props.put(WSHandlerConstants.ENCRYPTION_PARTS, "{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body");
        props.put(WSHandlerConstants.PW_CALLBACK_CLASS, ClientPasswordCallback.class.getName());
        
        WSS4JOutInterceptor wss4jOut = new WSS4JOutInterceptor(props);

        ClientProxy.getClient(client).getOutInterceptors().add(wss4jOut);
        
        /********************************SSL********************************************************/
        
        try {        
    
        	RetornoCancelarVenda cancelarVenda = ((ServicoServer)client).cancelarVenda(
        			"AIZ", 
        			"PYB", 
        			"BMS", 
        			GerarToken.encriptar(GerarToken.CHAVE_CLIENTE), 
        			"98324985972", 
        			"TST-DPH-001", 
        			"001", 
        			"-1", 
        			"S"
        			);
        	System.out.println("cancelarVenda.getRetorno()="+cancelarVenda.getRetorno());
        
          } catch (SecurityException e) {

            e.printStackTrace();

          } catch (IllegalArgumentException e) {

            e.printStackTrace();

          } catch (BillingException_Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		

	}

}
